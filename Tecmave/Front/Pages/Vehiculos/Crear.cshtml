@page
@model Front.Pages.Vehiculos.CrearModel
@{
    ViewData["Title"] = "Registrar vehículo";
}

<section class="section">
    <div class="container grid cols-2">
        <div class="card">
            <h3 id="formTitle">Registrar vehículo</h3>

            <div class="form-row">
                <div>
                    <label for="usuarioInput">Usuario</label>
                    <select id="usuarioInput" class="input">
                        <option value="">Seleccione un usuario</option>
                    </select>
                </div>
                <div>
                    <label for="marcaInput">Marca</label>
                    <select id="marcaInput" class="input">
                        <option value="">Seleccione una marca</option>
                    </select>
                </div>
            </div>

            <div class="form-row">
                <div>
                    <label for="modeloInput">Modelo</label>
                    <input id="modeloInput" class="input" maxlength="100" />
                </div>
                <div>
                    <label for="annoInput">Año</label>
                    <input id="annoInput" class="input" type="number" min="1950" max="2100" />
                </div>
            </div>

            <div class="form-row">
                <div>
                    <label for="placaInput">Placa</label>
                    <input id="placaInput" class="input" maxlength="10" />
                </div>
            </div>

            <div id="formMsg" class="text-danger mt-2" style="display:none;"></div>
        </div>

        <div class="card">
            <h3>Vehículos del usuario</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Placa</th>
                        <th>Marca</th>
                        <th>Modelo</th>
                        <th>Año</th>
                        <th>Acción</th>
                    </tr>
                </thead>
                <tbody id="listaDatos">
                    <tr><td colspan="5">Seleccione un usuario…</td></tr>
                </tbody>
            </table>
        </div>

        <div class="mt-4 d-flex gap-2">
            <button id="guardarBtn" class="btn btn-orange" type="button">Guardar</button>
            <a class="btn btn-secondary" asp-page="/Vehiculos/Index">Volver</a>
        </div>
    </div>
</section>

<!-- Modal reutilizable -->
<div id="appModal" class="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="modalTitle" aria-describedby="modalBody" style="display:none">
    <div class="modal-backdrop" data-close="1"></div>
    <div class="modal-dialog" role="document">
        <button class="modal-close" type="button" aria-label="Cerrar" data-close="1">×</button>
        <div class="modal-icon" id="modalIcon">✓</div>
        <h3 id="modalTitle">Título</h3>
        <p id="modalBody">Mensaje…</p>
        <div class="modal-actions">
            <button id="modalPrimary" class="btn btn-orange" type="button" data-close="1">Aceptar</button>
        </div>
    </div>
</div>

<style>
    .btn-orange {
        background: #ff8c00 !important;
        border: 1px solid #ff8c00 !important;
        color: #fff !important;
        padding: .5rem 1rem;
        border-radius: .25rem
    }

        .btn-orange:hover {
            background: #e67e00 !important
        }

    .btn-red {
        background: #dc3545 !important;
        border: 1px solid #dc3545 !important;
        color: #fff !important;
        padding: .3rem .8rem;
        border-radius: .25rem
    }

        .btn-red:hover {
            background: #b92b3a !important
        }

    .btn-outline-primary.btn-sm {
        padding: .3rem .6rem;
        border-radius: .25rem
    }

    .text-danger {
        color: #dc3545
    }

    .grid.cols-2 {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: .75rem
    }

    .input {
        width: 100%;
        padding: .5rem
    }

    .card {
        border: 1px solid #e5e5e5;
        border-radius: .5rem;
        padding: 1rem
    }

    .gap-2 {
        gap: .5rem
    }

    .table {
        width: 100%
    }

        .table th, .table td {
            padding: .5rem;
            border-bottom: 1px solid #eee
        }

    /* Modal */
    .modal {
        position: fixed;
        inset: 0;
        z-index: 1000;
        display: none
    }

        .modal.show {
            display: block
        }

    .modal-backdrop {
        position: absolute;
        inset: 0;
        background: rgba(0,0,0,.45)
    }

    .modal-dialog {
        position: relative;
        max-width: 480px;
        margin: 8vh auto 0;
        background: #fff;
        border-radius: .75rem;
        padding: 1.25rem;
        box-shadow: 0 10px 35px rgba(0,0,0,.25)
    }

    .modal-close {
        position: absolute;
        right: .5rem;
        top: .5rem;
        border: 0;
        background: transparent;
        font-size: 1.5rem;
        line-height: 1;
        cursor: pointer;
        color: #888
    }

    .modal-icon {
        width: 48px;
        height: 48px;
        border-radius: 999px;
        margin: .25rem 0 .5rem;
        display: grid;
        place-content: center;
        background: #e7f6ec;
        color: #2e7d32;
        font-weight: 700
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: .5rem;
        margin-top: 1rem
    }
</style>

<script>
    const API_BASE = "https://localhost:7096";
    const URL_VEHICULOS = `${API_BASE}/vehiculos`;
    const URL_MARCAS = `${API_BASE}/marcas`;
    const URL_USUARIOS = `${API_BASE}/api/usuarios`;

    const marcasMap = new Map();
    let currentVehiculoId = null;   // null = crear, número = editar
    let usersLoaded = false;
    let marcasLoaded = false;
    let pendingClienteId = null;    // para setear el usuario cuando cargue el vehículo

    function showMsg(text){
      const el = document.getElementById('formMsg');
      el.textContent = text || '';
      el.style.display = text ? 'block' : 'none';
    }

    function esc(s){
      return String(s ?? '').replace(/[&<>"'`=\/]/g, c => ({
        '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;','`':'&#96;','=':'&#61;','/':'&#47;'
      }[c]));
    }

    function getQS(name){
      const p = new URLSearchParams(window.location.search);
      return p.get(name);
    }

    /* =================== Modal helpers =================== */
    const Modal = (() => {
      const root   = document.getElementById('appModal');
      const title  = document.getElementById('modalTitle');
      const body   = document.getElementById('modalBody');
      const icon   = document.getElementById('modalIcon');
      let onClose  = null;

      function setKind(kind){
        // kind: 'ok' | 'warn' | 'error' | 'info'
        const map = {
          ok:   { bg:'#e7f6ec', color:'#2e7d32', text:'✓' },
          warn: { bg:'#fff4e5', color:'#a15c00', text:'!' },
          error:{ bg:'#fdecea', color:'#b3261e', text:'!' },
          info: { bg:'#e7f1ff', color:'#0b57d0', text:'ℹ' }
        };
        const k = map[kind] || map.info;
        icon.style.background = k.bg;
        icon.style.color = k.color;
        icon.textContent = k.text;
      }

      function show({ titleText = 'Información', bodyText = '', autoFocus = true, onCloseCb = null, kind = 'ok' }) {
        setKind(kind);
        title.textContent = titleText;
        body.textContent  = bodyText;
        onClose = typeof onCloseCb === 'function' ? onCloseCb : null;
        root.classList.add('show');
        root.style.display = 'block';
        root.setAttribute('aria-hidden', 'false');
        if (autoFocus) {
          const primary = document.getElementById('modalPrimary');
          setTimeout(() => primary?.focus(), 0);
        }
        document.addEventListener('keydown', escListener);
      }

      function hide() {
        root.classList.remove('show');
        root.style.display = 'none';
        root.setAttribute('aria-hidden', 'true');
        document.removeEventListener('keydown', escListener);
        if (onClose) { const cb = onClose; onClose = null; try { cb(); } catch {} }
      }

      function escListener(e) { if (e.key === 'Escape') hide(); }
      root.addEventListener('click', (e) => { if (e.target?.dataset?.close === '1') hide(); });

      return { show, hide };
    })();

    /* =================== Usuarios y marcas =================== */
    function nombreCompleto(u){
      const n = (u.nombre ?? u.Nombre ?? '').trim();
      const a = (u.apellidos ?? u.Apellidos ?? '').trim();
      const full = [n, a].filter(Boolean).join(' ').trim();
      return full || (u.userName ?? u.UserName ?? 'Usuario');
    }

    function cargarUsuarios(){
      return fetch(URL_USUARIOS, { credentials: 'include' })
        .then(r => r.json())
        .then(list => {
          const data = Array.isArray(list) ? list : (Array.isArray(list?.data) ? list.data : []);
          const sel = document.getElementById('usuarioInput');
          sel.innerHTML = '<option value="">Seleccione un usuario</option>';
          data.sort((a,b) => nombreCompleto(a).localeCompare(nombreCompleto(b)));
          for(const u of data){
            const id = u.id ?? u.Id;
            if(!id) continue;
            const opt = document.createElement('option');
            opt.value = id;
            opt.textContent = nombreCompleto(u);
            sel.appendChild(opt);
          }
          usersLoaded = true;
          if (pendingClienteId) {
            sel.value = String(pendingClienteId);
            cargarVehiculosAsociados();
          }
        })
        .catch(err => { console.error('usuarios', err); showMsg('Error al cargar usuarios.'); });
    }

    function cargarMarcas(){
      return fetch(URL_MARCAS, { credentials: 'include' })
        .then(r => r.json())
        .then(data => {
          const list = Array.isArray(data) ? data : (Array.isArray(data?.data) ? data.data : []);
          marcasMap.clear();
          for(const m of list){
            const id = m.id_marca ?? m.id ?? m.Id;
            const nombre = (m.nombre ?? m.Nombre ?? '').trim();
            if(id && nombre) marcasMap.set(Number(id), nombre);
          }

          const sel = document.getElementById('marcaInput');
          sel.innerHTML = '<option value="">Seleccione una marca</option>';
          [...marcasMap.entries()]
            .sort((a,b) => a[1].localeCompare(b[1]))
            .forEach(([id, nombre]) => {
              const opt = document.createElement('option');
              opt.value = String(id);
              opt.textContent = nombre;
              sel.appendChild(opt);
            });

          marcasLoaded = true;
        })
        .catch(err => { console.error('marcas', err); showMsg('Error al cargar marcas.'); });
    }

    /* =================== Listado por usuario =================== */
    function cargarVehiculosAsociados(){
      const uid = parseInt(document.getElementById('usuarioInput').value || '0', 10);
      const tb  = document.getElementById('listaDatos');
      if(!uid){ tb.innerHTML = '<tr><td colspan="5">Seleccione un usuario…</td></tr>'; return; }

      fetch(URL_VEHICULOS, { credentials: 'include' })
        .then(r => { if(!r.ok) throw r; return r.json(); })
        .then(data => {
          const list = Array.isArray(data) ? data : (Array.isArray(data?.data) ? data.data : []);
          const propios = list.filter(v => {
            const cid = v.cliente_id ?? v.clienteId ?? v.cliente?.id ?? v.ClienteId ?? 0;
            return Number(cid) === uid;
          });

          if(!propios.length){
            tb.innerHTML = '<tr><td colspan="5">Sin vehículos para este usuario.</td></tr>';
            return;
          }

          tb.innerHTML = propios.map(v => {
            const id       = v.id_vehiculo ?? v.id ?? v.Id;
            const placa    = String(v.placa ?? '').toUpperCase();
            const annoVal  = Number(v.anno ?? v.Anno ?? 0);
            const annoTxt  = annoVal > 0 ? String(annoVal) : '—';
            const modelo   = v.modelo ?? v.Modelo ?? '';
            const idMarca  = Number(v.id_marca ?? v.idMarca ?? v.MarcaId ?? 0);
            const marcaNom = (typeof v.marca === 'string' && v.marca.trim())
                              ? v.marca
                              : (marcasMap.get(idMarca) || (idMarca ? `#${idMarca}` : '—'));
            const selfUrl  = `${location.pathname}?id=${encodeURIComponent(id)}`;

            return `
              <tr>
                <td>${esc(placa)}</td>
                <td>${esc(marcaNom)}</td>
                <td>${esc(String(modelo))}</td>
                <td>${esc(annoTxt)}</td>
                <td>
                  <a class="btn btn-outline-primary btn-sm" href="${selfUrl}">Editar</a>
                  <button class="btn btn-red btn-sm" onclick="confirmarEliminar(${id})">Eliminar</button>
                </td>
              </tr>`;
          }).join('');
        })
        .catch(async err => {
          let msg = 'Error cargando vehículos.'; try { msg = (await err.json())?.message || msg; } catch {}
          tb.innerHTML = `<tr><td colspan="5">${esc(msg)}</td></tr>`;
        });
    }

    /* =================== Crear / Actualizar =================== */
    function getFormData(){
      const uid      = parseInt(document.getElementById('usuarioInput').value || '0', 10);
      const id_marca = parseInt(document.getElementById('marcaInput').value || '0', 10);
      const modelo   = (document.getElementById('modeloInput').value || '').trim();
      const anno     = parseInt(document.getElementById('annoInput').value || '0', 10);
      const placa    = (document.getElementById('placaInput').value || '').trim().toUpperCase();

      if(!uid) return { ok:false, msg:'Seleccione un usuario.' };
      if(!id_marca) return { ok:false, msg:'Seleccione una marca.' };
      if(!modelo) return { ok:false, msg:'El modelo es requerido.' };
      const yearNow = new Date().getFullYear();
      if(!anno || anno < 1950 || anno > yearNow + 1) return { ok:false, msg:`El año debe estar entre 1950 y ${yearNow + 1}.` };
      if(!placa) return { ok:false, msg:'La placa es requerida.' };

      return { ok:true, payload:{ cliente_id: uid, id_marca, modelo, anno, placa } };
    }

    async function crearVehiculo(){
      const { ok, msg, payload } = getFormData();
      if(!ok){ showMsg(msg); return; }
      showMsg('');

      const body = { id_vehiculo: 0, ...payload };

      const r = await fetch(URL_VEHICULOS, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(body)
      });

      if(!r.ok){
        let m = 'Error al registrar.'; try { m = (await r.json())?.message || m; } catch {}
        return showMsg(m);
      }

      // limpiar y refrescar
      document.getElementById('marcaInput').value = '';
      document.getElementById('modeloInput').value = '';
      document.getElementById('annoInput').value = '';
      document.getElementById('placaInput').value = '';
      cargarVehiculosAsociados();

      Modal.show({ titleText: 'Éxito', bodyText: 'Vehículo registrado correctamente.', kind: 'ok' });
    }

    async function actualizarVehiculo(){
      if(!currentVehiculoId) return showMsg('No hay vehículo cargado para editar.');

      const { ok, msg, payload } = getFormData();
      if(!ok){ showMsg(msg); return; }
      showMsg('');

      const body = { id_vehiculo: Number(currentVehiculoId), ...payload };

      const r = await fetch(URL_VEHICULOS, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(body)
      });

      if(!r.ok){
        let m = 'Error al actualizar.'; try { m = (await r.json())?.message || m; } catch {}
        return showMsg(m);
      }

      Modal.show({ titleText: 'Éxito', bodyText: 'Vehículo actualizado correctamente.', kind: 'ok' });
      salirModoEdicion();
      cargarVehiculosAsociados();
    }

    /* =================== Eliminar =================== */
    async function eliminarVehiculo(id){
      const r = await fetch(`${URL_VEHICULOS}/${id}`, { method:'DELETE', credentials:'include' });
      if(r.ok){
        // si estabas editando ese mismo vehículo, sal de edición y limpia form
        if(currentVehiculoId && Number(currentVehiculoId) === Number(id)){
          salirModoEdicion();
        }
        Modal.show({ titleText:'Eliminado', bodyText:'Vehículo eliminado correctamente.', kind:'ok', onCloseCb: () => cargarVehiculosAsociados() });
      }else{
        let m='Error al eliminar.'; try { m=(await r.json())?.message || m; } catch {}
        Modal.show({ titleText:'Error', bodyText:m, kind:'error' });
      }
    }

    function confirmarEliminar(id){
      const btn = document.getElementById('modalPrimary');
      const prevText = btn.textContent;
      const prevClose = btn.getAttribute('data-close');
      btn.textContent = 'Eliminar';
      btn.removeAttribute('data-close');

      const handler = async () => {
        btn.removeEventListener('click', handler);
        try { await eliminarVehiculo(id); } finally {
          btn.textContent = prevText;
          if(prevClose) btn.setAttribute('data-close', prevClose);
          Modal.hide();
        }
      };

      btn.addEventListener('click', handler, { once:true });
      Modal.show({
        titleText: 'Confirmar eliminación',
        bodyText: '¿Desea eliminar este vehículo?',
        kind: 'warn',
        onCloseCb: () => {
          btn.removeEventListener('click', handler);
          btn.textContent = prevText;
          if(prevClose) btn.setAttribute('data-close', prevClose);
        }
      });
    }

    /* =================== Modo crear/editar =================== */
    function setModoCrear(){
      currentVehiculoId = null;
      document.getElementById('formTitle').textContent = 'Registrar vehículo';
      const btn = document.getElementById('guardarBtn');
      btn.textContent = 'Guardar';
      btn.onclick = crearVehiculo;
    }

    function setModoEditar(id){
      currentVehiculoId = id;
      document.getElementById('formTitle').textContent = 'Editar vehículo';
      const btn = document.getElementById('guardarBtn');
      btn.textContent = 'Actualizar';
      btn.onclick = actualizarVehiculo;
    }

    function limpiarFormulario(){
      document.getElementById('marcaInput').value = '';
      document.getElementById('modeloInput').value = '';
      document.getElementById('annoInput').value = '';
      document.getElementById('placaInput').value = '';
      showMsg('');
    }

    function salirModoEdicion(){
      const url = new URL(window.location.href);
      url.searchParams.delete('id');
      window.history.replaceState({}, '', url.toString());
      setModoCrear();
      limpiarFormulario();
    }

    /* =================== Cargar vehículo por id (modo edición) =================== */
    async function cargarVehiculoPorId(id){
      if(!usersLoaded || !marcasLoaded){
        await Promise.all([cargarUsuarios(), cargarMarcas()]);
      }
      const r = await fetch(`${URL_VEHICULOS}/${encodeURIComponent(id)}`, { credentials:'include' });
      if(!r.ok){
        let m = 'No se pudo cargar el vehículo.'; try { m = (await r.json())?.message || m; } catch {}
        showMsg(m); return;
      }
      const v = await r.json();

      const clienteId = v.cliente_id ?? v.clienteId ?? v.ClienteId ?? v.cliente?.id ?? null;
      const marcaId   = v.id_marca ?? v.idMarca ?? v.MarcaId ?? null;

      if(clienteId){
        pendingClienteId = Number(clienteId);
        document.getElementById('usuarioInput').value = String(pendingClienteId);
        cargarVehiculosAsociados();
      }
      if(marcaId) document.getElementById('marcaInput').value = String(marcaId);

      document.getElementById('modeloInput').value = v.modelo ?? v.Modelo ?? '';
      document.getElementById('annoInput').value   = v.anno ?? v.Anno ?? '';
      document.getElementById('placaInput').value  = (v.placa ?? '').toString().toUpperCase();

      setModoEditar(Number(v.id_vehiculo ?? v.id ?? v.Id ?? id));
    }

    /* =================== Init =================== */
    document.addEventListener('DOMContentLoaded', async () => {
      setModoCrear();
      await Promise.all([cargarUsuarios(), cargarMarcas()]);
      document.getElementById('usuarioInput').addEventListener('change', cargarVehiculosAsociados);

      const qsId = getQS('id');
      if(qsId){
        try { await cargarVehiculoPorId(qsId); }
        catch (e) { console.error(e); showMsg('Error al cargar el vehículo.'); setModoCrear(); }
      }
    });
</script>
