@page
@model Front.Pages.Usuarios.IndexModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Usuarios Registrados";
}

<h1>Usuarios Registrados</h1>

<div class="row g-3 align-items-end mt-3">
    <div class="col-12 col-md-4">
        <label for="roleFilter" class="form-label">Filtrar por rol</label>
        <select id="roleFilter" class="form-select">
            <option value="">(Todos)</option>
            <option value="__SIN_ROL__">(Sin rol)</option>
        </select>
    </div>
    <div class="col-12 col-md-8">
        <label for="localSearch" class="form-label">Buscar</label>
        <div class="input-group">
            <input id="localSearch" class="form-control" placeholder="Buscar por username, email, teléfono o rol…" />
            <button id="clearSearch" class="btn btn-outline-secondary" type="button">Limpiar</button>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between align-items-center mt-3">
    <small id="resultsBadge" class="text-muted">Mostrando 0 de 0</small>
    <div class="d-flex gap-2">
        <a id="manageRolesBtn" class="btn btn-royal btn-sm" href="/Roles">Administrar Roles</a>
        <button id="exportBtn" class="btn btn-orange btn-sm" type="button">
            <i class="fa-solid fa-file-excel"></i> Exportar
        </button>
    </div>
</div>

<div class="table-responsive mt-2">
    <table class="table align-middle">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Apellidos</th>
                <th>Username</th>
                <th>Email</th>
                <th>Teléfono</th>
                <th>Rol</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="userTable">
            <tr><td colspan="5">Cargando usuarios…</td></tr>
        </tbody>
    </table>
</div>

<style>
    .btn-orange {
        background: #9FAA13 !important;
        border: 1px solid #9FAA13 !important;
        color: #fff !important;
    }

        .btn-orange:hover {
            background: #9FAA13 !important;
        }

    .btn-royal {
        background: #C36721 !important;
        border: 1px solid #C36721 !important;
        color: #fff !important;
    }
</style>

<script>
    const API_BASE = '@(Model?.ApiBase ?? "https://localhost:7096")';
    const USERS_URL = `${API_BASE}/api/usuarios`;
    const ROLES_URL = `${API_BASE}/api/roles`;

    let allUsers = [];
    let allRoleNamesNorm = [];
    const U = s => (s ?? '').toString().trim().toUpperCase();

    function debounce(fn, d=250){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), d);} }
    function escapeHtml(s){ return String(s ?? '').replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;').replaceAll('"','&quot;').replaceAll("'",'&#39;'); }

    async function loadRolesList(){
      try{
        const roles = await $.getJSON(ROLES_URL);
        allRoleNamesNorm = roles
          .map(r => r.normalizedName ?? r.NormalizedName ?? (r.name ? U(r.name) : null))
          .filter(Boolean);
      }catch{ allRoleNamesNorm = []; }
    }

    function populateRoleFilter(){
      const union = new Set([
        ...allRoleNamesNorm,
        ...allUsers.flatMap(u => (u.roles || []).map(U))
      ]);
      const $sel = $('#roleFilter').empty();
      $sel.append(`<option value="">(Todos)</option>`);
      $sel.append(`<option value="__SIN_ROL__">(SIN ROL)</option>`);
      Array.from(union).filter(Boolean).sort().forEach(r =>
        $sel.append(`<option value="${escapeHtml(r)}">${escapeHtml(r)}</option>`)
      );
    }

    function getSearchText(){ return ($('#localSearch').val() || '').toLowerCase(); }

    function applyFilters(){
      const selected = $('#roleFilter').val();
      const q = getSearchText();
      return allUsers.filter(u => {
        const roles = Array.isArray(u.roles) ? u.roles.map(U) : [];
        const roleOk = !selected
          ? true
          : (selected === '__SIN_ROL__' ? roles.length === 0 : roles.includes(U(selected)));
        const haystack = [
          u.userNameNorm || U(u.userName),
          u.email || '',
          u.phoneNumber || '',
          ...roles
        ].join(' ').toLowerCase();
        return roleOk && (!q || haystack.includes(q));
      });
    }

    function renderTable(users){
      const $tb = $('#userTable').empty();
      if(!users.length){
        $tb.html(`<tr><td colspan="5" class="text-muted">No hay usuarios.</td></tr>`);
        $('#resultsBadge').text(`Mostrando 0 de ${allUsers.length}`);
        return;
      }
      users.forEach(u=>{
        const rolesText = (u.roles && u.roles.length) ? u.roles.map(U).join(', ') : '(SIN ROL)';
        $tb.append(`<tr>
            <td>${escapeHtml(u.nombre || 'Sin definir')}</td>
            <td>${escapeHtml(u.apellidos || 'Sin definir')}</td>
            <td>${escapeHtml(u.userNameNorm || U(u.userName))}</td>
            <td>${escapeHtml(u.email)}</td>
            <td>${escapeHtml(u.phoneNumber)}</td>
            <td>${escapeHtml(rolesText)}</td>
            <td><a class="btn btn-primary btn-sm" href="/Usuarios/Editar/${encodeURIComponent(u.id)}">Editar</a></td>
        </tr>`);
      });
      $('#resultsBadge').text(`Mostrando ${users.length} de ${allUsers.length}`);
    }

    async function loadUsers(){
      try{
        try{
          const res = await fetch(`${USERS_URL}/with-role`);
          if(res.ok){
            const rows = await res.json();
            allUsers = rows.map(u => ({
              id: u.id,
              userName: u.userName,
              userNameNorm: U(u.userName),
              email: u.email,
              phoneNumber: u.phoneNumber,
              roles: u.role ? [U(u.role)] : []
            }));
            populateRoleFilter(); renderTable(applyFilters());
            return;
          }
        }catch{}
        const users = await $.getJSON(USERS_URL);
        const roleFetches = users.map(async (u) => {
          try{
            const arr = await $.getJSON(`${USERS_URL}/${u.id}/roles`);
            const roles = Array.isArray(arr) ? arr.map(U) : [];
            return { ...u, userNameNorm: U(u.userName), roles };
          }catch{
            try{
              const obj = await $.getJSON(`${USERS_URL}/${u.id}/role`);
              const roleName = obj?.role ?? obj?.Role;
              const roles = roleName ? [U(roleName)] : [];
              return { ...u, userNameNorm: U(u.userName), roles };
            }catch{
              return { ...u, userNameNorm: U(u.userName), roles: [] };
            }
          }
        });
        allUsers = await Promise.all(roleFetches);
        populateRoleFilter(); renderTable(applyFilters());
      }catch(e){
        $('#userTable').html(`<tr><td colspan="5" class="text-danger">Error cargando usuarios</td></tr>`);
      }
    }

    // ---------- EXPORTAR A EXCEL  ----------
    function csvEscape(val){
      const s = (val ?? '').toString();
      if (/[",\n\r;]/.test(s)) {
        return `"${s.replace(/"/g, '""')}"`;
      }
      return s;
    }

    function buildCsv(rows){
      const headers = ['Username','Email','Teléfono','Rol'];
      const lines = [headers.join(',')];
      rows.forEach(u => {
        const rol = (u.roles && u.roles.length) ? u.roles.join(' | ') : '(SIN ROL)';
        lines.push([
          csvEscape(u.userNameNorm || U(u.userName)),
          csvEscape(u.email || ''),
          csvEscape(u.phoneNumber || ''),
          csvEscape(rol)
        ].join(','));
      });
      return '\uFEFF' + lines.join('\r\n');
    }

    window.exportToExcel = function(){
      const rows = applyFilters();
      if (!rows.length){
        alert('No hay datos para exportar.');
        return;
      }
      const csv = buildCsv(rows);
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });

      // Nombre con fecha/hora
      const now = new Date();
      const pad = n => n.toString().padStart(2,'0');
      const fname = `usuarios_${now.getFullYear()}${pad(now.getMonth()+1)}${pad(now.getDate())}_${pad(now.getHours())}${pad(now.getMinutes())}.csv`;

      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = fname;
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
    };

    $(function(){
      loadRolesList().then(loadUsers);
      $('#roleFilter').on('change', ()=>renderTable(applyFilters()));
      $('#localSearch').on('input', debounce(()=>renderTable(applyFilters()), 200));
      $('#localSearch').on('keydown', e=>{ if(e.key==='Enter'){ e.preventDefault(); e.currentTarget.blur(); }});
      $('#clearSearch').on('click', ()=>{ $('#localSearch').val(''); renderTable(applyFilters()); $('#localSearch').focus(); });

      $('#exportBtn').on('click', ()=>window.exportToExcel());
    });
</script>

